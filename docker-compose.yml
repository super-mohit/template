# docker-compose.yml
services:
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
      POSTGRES_DB: ${POSTGRES_DB:-app_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-user} -d ${POSTGRES_DB:-app_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Dedicated PostgreSQL database for Keycloak
  postgres_keycloak:
    image: postgres:15-alpine
    environment:
      POSTGRES_USER: ${KEYCLOAK_DB_USER:-keycloak}
      POSTGRES_PASSWORD: ${KEYCLOAK_DB_PASSWORD:-password}
      POSTGRES_DB: ${KEYCLOAK_DB_NAME:-keycloak_db}
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    restart: unless-stopped
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${KEYCLOAK_DB_USER:-keycloak} -d ${KEYCLOAK_DB_NAME:-keycloak_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  keycloak:
    image: quay.io/keycloak/keycloak:24.0.4
    # Using start-dev for development while still leveraging PostgreSQL
    command: start-dev --import-realm
    environment:
      # Admin credentials
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
      # PostgreSQL database connection settings
      KC_DB: ${KC_DB}
      KC_DB_URL_HOST: ${KC_DB_URL_HOST}
      KC_DB_URL_DATABASE: ${KC_DB_URL_DATABASE}
      KC_DB_USERNAME: ${KC_DB_USERNAME}
      KC_DB_PASSWORD: ${KC_DB_PASSWORD}
    volumes:
      # Import volume for realm configuration
      - ./keycloak/import:/opt/keycloak/data/import
      # Removed H2 database volume - now using PostgreSQL
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - app-network
    # Wait for Keycloak's PostgreSQL database to be healthy before starting
    depends_on:
      postgres_keycloak:
        condition: service_healthy

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    volumes:
      - ./app:/app/app
      - ./utils:/app/utils  # Mount utils directory
      - ./alembic:/app/alembic  # Mount alembic directory  
      - ./alembic.ini:/app/alembic.ini  # Mount alembic config file
    ports:
      - "8001:8000"
    environment:
      - APP_ENV=development  # This tells entrypoint.sh to use development mode
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      keycloak:
        condition: service_started
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      # Build-time arguments (`args`) are used to bake environment variables
      # into the static frontend assets during the `next build` process.
      args:
        - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL}
        - NEXT_PUBLIC_BASE_PATH=${NEXT_PUBLIC_BASE_PATH}
        - KEYCLOAK_SERVER_URL=${KEYCLOAK_SERVER_URL}
        - KEYCLOAK_REALM=${KEYCLOAK_REALM}
        - KEYCLOAK_CLIENT_ID=${KEYCLOAK_CLIENT_ID}
        - KEYCLOAK_CLIENT_SECRET=${KEYCLOAK_CLIENT_SECRET}
        - NEXTAUTH_SECRET=${NEXTAUTH_SECRET}
        - NEXTAUTH_URL=${NEXTAUTH_URL}
        - SUPERVITY_AUTH_DEBUG=${SUPERVITY_AUTH_DEBUG}
        - NEXT_PUBLIC_KEYCLOAK_URL=${NEXT_PUBLIC_KEYCLOAK_URL}
    ports:
      - "3001:3000"
    # Runtime environment variables (`environment` or `env_file`) are available
    # to the Node.js server process when it runs the application (`next start`).
    env_file:
      - .env
    depends_on:
      - keycloak
      - backend
    networks:
      - app-network
    restart: unless-stopped

volumes:
  postgres_data:
  postgres_keycloak_data:

# Define the shared network
networks:
  app-network:
    driver: bridge
